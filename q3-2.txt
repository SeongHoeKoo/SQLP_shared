-- 3-2-1) setting

DROP TABLE YOON.T_ORDER42;
CREATE TABLE YOON.T_ORDER42
 (  ORDER_NO      VARCHAR2(7)
  , CUST_NO       VARCHAR2(7)
  , GOODS_NO      VARCHAR2(7)
  , ORDER_DT      VARCHAR2(8)
  , ORDER_AMT     NUMBER
  , ORDER_QTY     NUMBER
  , ORDER_CD      VARCHAR2(5)
  , CONSTRAINT PK_T_ORDER42 PRIMARY KEY (ORDER_NO)
  )
;

CREATE PUBLIC SYNONYM T_ORDER42 FOR YOON.T_ORDER42;

INSERT /*+ APPEND */ INTO T_ORDER42
SELECT LPAD(TO_CHAR(ROWNUM), 7, '0')        ORDER_NO
    ,  LPAD(TO_CHAR(ROWNUM), 7, '0')        CUST_NO
    ,  LPAD(TO_CHAR(ROWNUM), 7, '0')        GOODS_NO
    ,  TO_CHAR(SYSDATE-ROWNUM, 'YYYYMMDD')  ORDER_DT
    ,  ROWNUM                               ORDER_AMT 
    ,  MOD(ROWNUM, 1000)+ 1                 ORDER_QTY
    ,  LPAD(ROUND(DBMS_RANDOM.VALUE(1, 10000)), 5, '0') ORDER_CD
FROM DUAL
CONNECT BY LEVEL <= 100000
;

COMMIT;

CREATE INDEX YOON.IX_T_ORDER42 ON YOON.T_ORDER42(ORDER_CD);

ANALYZE TABLE YOON.T_ORDER42 ESTIMATE STATISTICS SAMPLE 10 PERCENT;



-- 3-2-2) setting

/* 
다음의 SQL을 같은 Data을 증복해서 읽지 않도록 개선하세요.
필요한 인덱스는 모두 구성되었다는 가정 
*/

--문제1)
SELECT  B.ORDER_NO, B.ORDER_CD, 
        ROUND(A.ORDER_AMT_AVG) 평균주문금액, A.ORDER_AMT_SUM 주문합계금액
FROM  (SELECT ORDER_CD
            , AVG(ORDER_AMT) ORDER_AMT_AVG
            , SUM(ORDER_AMT) ORDER_AMT_SUM
       FROM T_ORDER42
       GROUP BY ORDER_CD
      )A,  T_ORDER42 B
WHERE B.ORDER_CD = A.ORDER_CD
ORDER BY ORDER_CD, ORDER_NO
;

--문제2)
SELECT B.ORDER_NO, B.ORDER_CD, B.ORDER_DT, B.ORDER_AMT, B.ORDER_QTY
FROM (SELECT MAX(ORDER_NO) ORDER_NO
      FROM T_ORDER42
      GROUP BY ORDER_CD
    ) A, T_ORDER42 B
WHERE B.ORDER_NO = A.ORDER_NO
ORDER BY ORDER_CD, ORDER_NO
;

